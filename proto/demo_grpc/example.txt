           p4::v1::TableEntry match_action_entry;
            LOG("----TEST ADD SIMPLE L2");
            //fabric->add_next_simple_bridge(3, 30, match_action_entry);
	    match_action_entry.set_table_id(100);
	    for(int i = 0; i <   MAX_FIELD_MATCHES; i++) {
		      match_action_entry.add_match()->mutable_exact()->set_value("0123456789012345");
	    }
	    for(int i = 0; i <   MAX_FIELD_MATCHES; i++) {
		      auto f = match_action_entry.add_match()
			        f->set_field_id(i);
		        f->mutable_exact()->set_value("0123456789012345");
	    }

	    auto act = match_action_entry.mutable_action()->mutable_action();
	    act->set_action_id(100);
	    for(int i = 0; i <  0 /* MAX_PARAMS*/; i++) {
		      auto param = act->add_params();
		        param->set_value("0123456789012345");
			  param->set_param_id(i);
	    }

for (int t = 0; t < 1; t++) {
            if (0 != add_one_entry(&match_action_entry)) {
                LOG("Error add_next_simple_bridge for next-id 3");
	    }
		if (t %10000 == 0)
		LOG("Done" << t );
}// end for


 p4::v1::WriteRequest request;
  request.set_device_id(dev_id);

  auto start_time = duration_cast<milliseconds>(system_clock::now().time_since_epoch()).count();
  auto start_create_request_time = start_time;
  auto end_write_request_time = start_time;
  Status status;
  int req_num = 1;
  int entries = 50000000;
  for (int cur_req = 0; cur_req < req_num; cur_req++) {
      #if 1
      start_create_request_time = duration_cast<milliseconds>(system_clock::now().time_since_epoch()).count();
	for (int i = 0; i < entries; i++) {
      #endif
	   auto update = request.add_updates();
          update->set_type(p4::v1::Update_Type_INSERT);
          auto entity = update->mutable_entity();
          entity->set_allocated_table_entry(match_action_entry);
          entity->release_table_entry();
      }

      auto end_create_request_time = duration_cast<milliseconds>(system_clock::now().time_since_epoch()).count();
      int total_create_request_time = end_create_request_time - start_create_request_time;
      p4::fe::local::Write(request); 
1     int write_time = duration_cast<milliseconds>(system_clock::now().time_since_epoch()).count();
       int total_write_request_time = end_create_request_time - start_create_request_time;

  LOG("creation time " << (total_create_request_time)<<  ", creation rate = " << 1000.0 * double(entries * req_num) / (total_create_request_time));
  LOG("write time " << (total_write_request_time)<<  ", write rate = " << 1000.0 * double(entries * req_num) / (total_write_request_time));
       exit(-1);

